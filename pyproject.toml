[tool.poetry]
name = "simbot-offline-inference"
version = "2.1.0"
description = ""
authors = ["Amit Parekh <7276308+amitkparekh@users.noreply.github.com>"]
readme = "README.md"
packages = [
	{ include = "simbot_offline_inference", from = "src" },
	{ include = "arena_wrapper", from = "src" },
	{ include = "arena_missions", from = "src" },
]

[tool.poe.tasks]

[tool.poe.tasks.format]
help = "Format using the pre-commit hooks"
cmd = "pre-commit run --all-files"

[tool.poe.tasks.typecheck]
help = "Check types with mypy"
cmd = "mypy ."

[tool.poe.tasks.lint]
help = "Lint with flake8"
cmd = "flake8 ."

[tool.poetry.dependencies]
python = "~3.9"
flask = "^2.2.2"
unityparser = "^2.2.1"
opencv-python = "^4.7.0.68"
scipy = "^1.10.0"
jinja2 = "^3.1.2"
flask-cors = "^3.0.10"
gevent = "^22.10.2"
shortuuid = "^1.0.11"
typing-extensions = "^4.5.0"

[tool.poetry.group.emma.dependencies]
emma-experience-hub = { git = "https://github.com/emma-simbot/experience-hub" }

[tool.poetry.group.lint.dependencies]
black = "^23.3.0"
wemake-python-styleguide = "^0.17.0"
mypy = "^1.2.0"
pre-commit = "^3.2.2"
poethepoet = "^0.18.1"
isort = "^5.12.0"


[tool.poetry.group.test.dependencies]
pytest = "^7.2.2"
pytest-cases = "^3.6.14"
pytest-cov = "^4.0.0"

[tool.black]
line-length = 99

[tool.isort]
profile = "black"
combine_as_imports = true
lines_after_imports = 2
line_length = 99
extra_standard_library = ["typing_extensions"]
known_first_party = ["emma_*", "arena_*", "simbot_*"]

[tool.pyright]
include = ["src"]
exclude = ["src/arena_wrapper"]
# typeCheckingMode = "strict"
reportImportCycles = "error"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"
